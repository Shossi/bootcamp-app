trigger:
- main
- feature/*
resources:
- repo: self
  clean: true
stages:
- stage: Build_Dockerfile
  variables:
  - group: prod
  displayName: Dockerfile build and push
  jobs:
  - job: Docker_Image
    displayName: Creating the Docker image
    pool:
      name: prod      
    steps:
    - checkout: self
      clean: true
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
             Set-Content ./.env "
             PORT=8080
             HOST=0.0.0.0
             NODE_ENV=development
             OKTA_ORG_URL=https://dev79904368.okta.com"
      displayName: 'Creating .env file'
    - task: Docker@2
      inputs:
        containerRegistry: 'bootacr'
        repository: 'weight/app'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: '1.0.$(Build.BuildId)'
############################################################# Deploying Staging Docker container
- stage: Deployment
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/main'))
  variables:
  - group: prod
  displayName: Create Secret
  jobs:
  - job: Deployment
    displayName: Deployment
    pool:
      name: prod      
    steps:
    - task: KubernetesManifest@0
      inputs:
        action: 'createSecret'
        kubernetesServiceConnection: 'k8s'
        namespace: default
        secretType: 'generic'
        secretName: 'web-secret'
        secretArguments: |
         --from-literal=COOKIE_ENCRYPT_PWD=$(COOKIE)
         --from-literal=HOST_URL=$(HOST_URL)
         --from-literal=OKTA_CLIENT_ID=$(OKTA_ID)
         --from-literal=OKTA_CLIENT_SECRET=$(OKTA_SECRET)
         --from-literal=PGDATABASE=$(PGDATABASE)
         --from-literal=PGHOST=$(PGHOST)
         --from-literal=PGPASSWORD=$(PGPASSWORD)
         --from-literal=PGPORT=$(PGPORT)
         --from-literal=PGUSERNAME=$(PGUSERNAME) 
    - task: KubernetesManifest@0
      displayName: Create imagePullSecret
      inputs:
        action: 'createSecret'
        kubernetesServiceConnection: 'k8s'
        secretType: 'dockerRegistry'
        secretName: 'secret/web-secret'
        dockerRegistryEndpoint: 'bootacr'

#       inputs:
#         targetType: 'inline'
#         script: |
#           echo "[servers]
#           server1 ansible_host=10.0.0.4
#           server2 ansible_host=10.0.0.5
#           server3 ansible_host=10.0.0.6

#           [servers:vars]
#           ansible_python_interpreter=/usr/bin/python3
#           ansible_connection=ssh
#           ansible_user=ubuntu
#           ansible_ssh_pass=$(staging_web_pass)
#           env=staging
#           tag=1.0.$(Build.BuildId)
#           registry=$(reg_uri)
#           username=$(reg_username)
#           password=$(reg_password)" > $(Build.SourcesDirectory)/ansible/inv.ini
#       displayName: Creating the inv file
#     # - task: Ansible@0
#     #   inputs:
#     #     ansibleInterface: 'agentMachine'
#     #     playbookPathOnAgentMachine: '$(Build.SourcesDirectory)/ansible/playbook.yaml'
#     #     inventoriesAgentMachine: 'file'
#     #     inventoryFileOnAgentMachine: '$(Build.SourcesDirectory)/ansible/inv.ini'
#     - task: Bash@3
#       inputs:
#         targetType: 'inline'
#         script: |
#           ansible-playbook playbook.yaml -i inv.ini
#         workingDirectory: $(Build.SourcesDirectory)/ansible/
#       displayName: Deploying the staging container